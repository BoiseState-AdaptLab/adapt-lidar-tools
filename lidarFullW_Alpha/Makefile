# SYNOPSIS:
#
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
GTEST_DIR = deps/googletest/googletest

# Points to the root of Pulse Waves, relative to where this file is.
PULSE_DIR = deps/PulseWaves

# Where to find user code.
USER_DIR = src

# Different directories
BIN = bin
OBJ = obj
LIB = lib

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread -I$(PULSE_DIR)/inc
CFLAGS += -g -Wall -Wextra -pthread -I$(PULSE_DIR)/inc

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = $(BIN)/cmdLine_unittests $(BIN)/FullWaveformIngestion_unittests \
        $(BIN)/ScannerInformation_unittests

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h


# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
$(OBJ)/gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc -o $@

$(OBJ)/gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc -o $@

$(LIB)/gtest.a : $(OBJ)/gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

$(LIB)/gtest_main.a : $(OBJ)/gtest-all.o $(OBJ)/gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

$(BIN)/%_unittests: $(USER_DIR)/%_unittests.o $(USER_DIR)/%.o \
                    $(LIB)/gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@ -L\
            $(PULSE_DIR)/lib -lpulsewaves

$(USER_DIR)/%_unittests.o: $(USER_DIR)/%_unittests.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $^ 

$(USER_DIR)/FullWaveformIngestion.o: $(USER_DIR)/FullWaveformIngestion.cpp
	$(CXX) -c -o $@ $^ $(CFLAGS) -L$(PULSE_DIR)/lib

$(USER_DIR)/ScannerInformation.o: $(USER_DIR)/ScannerInformation.cpp
	$(CXX) -c -o $@ $^ $(CFLAGS) -L$(PULSE_DIR)/lib
	
$(USER_DIR)/GPSInformation.o: $(USER_DIR)/GPSInformation.cpp
	$(CXX) -c -o $@ $^ $(CFLAGS) -L$(PULSE_DIR)/lib

$(USER_DIR)/%.o: $(USER_DIR)/%.cpp
	$(CXX) -c -o $@ $^ $(CFLAGS)

.PHONY: test

lidarDriver: $(BIN)/lidarDriver

$(BIN)/lidarDriver: $(USER_DIR)/lidarDriver.o $(USER_DIR)/cmdLine.o \
                    $(USER_DIR)/ScannerInformation.o \
                    $(USER_DIR)/GPSInformation.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@ -L\
            $(PULSE_DIR)/lib -lpulsewaves

$(USER_DIR)/lidarDriver.o: $(USER_DIR)/lidarDriver.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $^ 

test: $(TESTS)
	$(BIN)/cmdLine_unittests
	$(BIN)/FullWaveformIngestion_unittests
	$(BIN)/ScannerInformation_unittests

clean: 
	rm -f $(BIN)/*
	rm -f $(OBJ)/*
	rm -f $(LIB)/*
	rm -f $(USER_DIR)/*.o
